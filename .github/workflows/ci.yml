name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  # Build and test Android and shared Kotlin code on Ubuntu
  android-and-shared:
    name: Build Android & Shared
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java 21
        uses: actions/setup-java@v5
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          build-scan-publish: true

      - name: Cache Kotlin/Native dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.konan
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-kotlin-native-${{ hashFiles('**/*.gradle.kts', 'gradle/wrapper/gradle-wrapper.properties', 'gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-kotlin-native-

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Build shared module
        run: ./gradlew :shared:build --no-daemon --parallel --build-cache

      - name: Build Android app
        run: ./gradlew :composeApp:assembleDebug --no-daemon --parallel --build-cache

      - name: Run unit tests
        run: ./gradlew test --no-daemon --parallel --build-cache

      - name: Run Android tests
        run: ./gradlew :composeApp:testDebugUnitTest --no-daemon --parallel --build-cache

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-test-reports
          path: |
            **/build/reports/tests/
            **/build/test-results/
          retention-days: 7

      - name: Upload build reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-build-reports
          path: |
            **/build/reports/problems/
            **/build/reports/configuration-cache/
            **/build/reports/build-scan/
            **/build/reports/dependency-verification/
          retention-days: 7

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: android-apk
          path: composeApp/build/outputs/apk/debug/*.apk
          retention-days: 7

  # Build iOS on macOS
  ios:
    name: Build iOS
    runs-on: macos-26
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java 21
        uses: actions/setup-java@v5
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          build-scan-publish: true

      - name: Cache Kotlin/Native dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.konan
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-kotlin-native-${{ hashFiles('**/*.gradle.kts', 'gradle/wrapper/gradle-wrapper.properties', 'gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-kotlin-native-

      - name: Cache Xcode derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-derived-data-${{ hashFiles('iosApp/**/*.swift', 'iosApp/iosApp.xcodeproj/**') }}
          restore-keys: |
            ${{ runner.os }}-xcode-derived-data-

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Build shared module
        run: ./gradlew :shared:build --no-daemon --parallel --build-cache

      - name: Build iOS Kotlin framework
        run: ./gradlew :composeApp:linkDebugFrameworkIosArm64 :composeApp:linkDebugFrameworkIosSimulatorArm64 --no-daemon --parallel --build-cache

      - name: Run iOS tests
        run: ./gradlew :composeApp:iosSimulatorArm64Test --no-daemon --parallel --build-cache

      - name: Build iOS app for simulator
        run: |
          cd iosApp
          xcodebuild -project iosApp.xcodeproj -scheme iosApp -destination 'platform=iOS Simulator,name=iPhone 17,OS=latest' build

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-test-reports
          path: |
            **/build/reports/tests/
            **/build/test-results/
          retention-days: 7

      - name: Upload build reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-build-reports
          path: |
            **/build/reports/problems/
            **/build/reports/configuration-cache/
            **/build/reports/build-scan/
            **/build/reports/dependency-verification/
          retention-days: 7

      - name: Upload Xcode build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: xcode-build-logs
          path: |
            ~/Library/Logs/DiagnosticReports/
            ~/Library/Developer/Xcode/DerivedData/**/Logs/
          retention-days: 7

  # Lint and code quality checks
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java 21
        uses: actions/setup-java@v5
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          build-scan-publish: true

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts', 'gradle/wrapper/gradle-wrapper.properties', 'gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Android Lint
        run: ./gradlew :composeApp:lint :shared:lint --no-daemon --parallel

      - name: Run Detekt static analysis
        run: ./gradlew detekt --continue --no-daemon --parallel

      - name: Run basic Kotlin compilation check
        run: ./gradlew compileKotlin --no-daemon --parallel
        continue-on-error: true

      - name: Upload lint reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-reports
          path: |
            **/build/reports/lint-results-*.html
            **/build/reports/lint-results-*.xml
            **/build/reports/lint-results-*.txt
          retention-days: 7

      - name: Upload detekt reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: detekt-reports
          path: |
            **/build/reports/detekt/*.html
            **/build/reports/detekt/*.xml
            **/build/reports/detekt/*.txt
            **/build/reports/detekt/*.sarif
          retention-days: 7

      - name: Upload lint build reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-build-reports
          path: |
            **/build/reports/problems/
            **/build/reports/configuration-cache/
            **/build/reports/build-scan/
          retention-days: 7

  # Security and dependency checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

  # Build summary and status
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [android-and-shared, ios, lint, security]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/
        continue-on-error: true

      - name: Create build summary report
        run: |
          mkdir -p build-summary
          echo "# AllesTeurer CI Build Report" > build-summary/BUILD_REPORT.md
          echo "" >> build-summary/BUILD_REPORT.md
          echo "## Build Status" >> build-summary/BUILD_REPORT.md
          echo "- **Android & Shared build**: ${{ needs.android-and-shared.result }}" >> build-summary/BUILD_REPORT.md
          echo "- **iOS build**: ${{ needs.ios.result }}" >> build-summary/BUILD_REPORT.md
          echo "- **Lint**: ${{ needs.lint.result }}" >> build-summary/BUILD_REPORT.md
          echo "- **Security**: ${{ needs.security.result }}" >> build-summary/BUILD_REPORT.md
          echo "" >> build-summary/BUILD_REPORT.md
          echo "## Available Artifacts" >> build-summary/BUILD_REPORT.md
          if [ -d "artifacts" ]; then
            find artifacts -type f -name "*.html" -o -name "*.xml" -o -name "*.json" | head -20 | while read file; do
              echo "- \`$file\`" >> build-summary/BUILD_REPORT.md
            done
          fi
          echo "" >> build-summary/BUILD_REPORT.md
          echo "Generated on: $(date)" >> build-summary/BUILD_REPORT.md

      - name: Create GitHub Job Summary
        run: |
          echo "# 🏗️ AllesTeurer Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Android & Shared | ${{ needs.android-and-shared.result == 'success' && '✅ Success' || needs.android-and-shared.result == 'failure' && '❌ Failed' || '⚠️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| iOS | ${{ needs.ios.result == 'success' && '✅ Success' || needs.ios.result == 'failure' && '❌ Failed' || '⚠️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Code Quality | ${{ needs.lint.result == 'success' && '✅ Success' || needs.lint.result == 'failure' && '❌ Failed' || '⚠️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security.result == 'success' && '✅ Success' || needs.security.result == 'failure' && '❌ Failed' || '⚠️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📁 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "The following reports and artifacts were generated:" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Test reports (Android & iOS)" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Build reports and configuration cache info" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Lint and static analysis reports" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 Android APK (debug build)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 Security scan results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All artifacts are available for download from the Actions summary page." >> $GITHUB_STEP_SUMMARY

      - name: Upload consolidated build summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-summary
          path: |
            build-summary/
            artifacts/
          retention-days: 14

      - name: Check build results
        run: |
          echo "Android & Shared build: ${{ needs.android-and-shared.result }}"
          echo "iOS build: ${{ needs.ios.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"

          if [[ "${{ needs.android-and-shared.result }}" == "failure" || "${{ needs.ios.result }}" == "failure" ]]; then
            echo "❌ Build failed"
            exit 1
          elif [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "⚠️ Build succeeded but linting failed"
            exit 1
          else
            echo "✅ All builds succeeded"
          fi
