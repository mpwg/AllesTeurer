name: iOS CI/CD Pipeline

on:
  # Build and test on all branch pushes and PRs, plus tag-based releases
  push:
    branches: [main, develop]
    tags:
      - "v*.*.*" # Production releases (v1.0.0)
      - "v*.*.*-beta*" # Beta releases (v1.0.0-beta.1)
      - "v*.*.*-rc*" # Release candidates (v1.0.0-rc.1)
      - "v*.*.*-alpha*" # Alpha releases (v1.0.0-alpha.1)
  pull_request:
    branches: [main, develop]

  # Manual workflow dispatch for emergency releases or testing
  workflow_dispatch:
    inputs:
      deploy_target:
        description: "Deploy target"
        required: true
        default: "none"
        type: choice
        options:
          - none
          - testflight
          - appstore
      tag_override:
        description: "Tag to use for version (optional, defaults to current commit)"
        required: false
        type: string

permissions:
  contents: write # Required for creating releases
  actions: read # Required for downloading artifacts

env:
  FASTLANE_SKIP_UPDATE_CHECK: 1
  FASTLANE_HIDE_GITHUB_ISSUES: 1
  FASTLANE_DISABLE_COLORS: 1
  FASTLANE_OPT_OUT_USAGE: 1
  # Build performance optimizations
  FASTLANE_BUILD_JOBS: 4
  # Swift compilation performance
  SWIFT_DETERMINISTIC_HASHING: 1

jobs:
  build-and-test:
    runs-on: macos-26
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Ruby (for Fastlane)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "26.0"

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/Library/Caches/com.apple.dt.Xcode
            ~/Library/Developer/Xcode/UserData/IB Support
            ~/Library/Developer/Xcode/UserData/IBDesignables
          key: ${{ runner.os }}-xcode-deriveddata-${{ hashFiles('**/project.pbxproj', '**/*.swift', '**/*.h', '**/*.m') }}
          restore-keys: |
            ${{ runner.os }}-xcode-deriveddata-
            ${{ runner.os }}-xcode-

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.swift', '**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Cache CocoaPods (if used)
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/CocoaPods
            ./Pods
          key: ${{ runner.os }}-cocoapods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-cocoapods-

      - name: Cache Fastlane Match certificates
        uses: actions/cache@v4
        with:
          path: ~/.fastlane/match
          key: ${{ runner.os }}-match-${{ hashFiles('fastlane/Matchfile') }}
          restore-keys: |
            ${{ runner.os }}-match-

      - name: Optimize build environment
        run: |
          # Set optimal build jobs based on available CPU cores
          echo "FASTLANE_BUILD_JOBS=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
          # Set Xcode build settings for performance
          defaults write com.apple.dt.Xcode IDEBuildOperationMaxNumberOfConcurrentCompileTasks $(sysctl -n hw.logicalcpu)
          defaults write com.apple.dt.Xcode IDEIndexDisable -bool YES
          defaults write com.apple.dt.Xcode IDEIndexerActivityShowNumericProgress -bool YES

      - name: Build and Test with Fastlane
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'default_password' }}
        run: bundle exec fastlane test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ./build/test-results/**
            ./build/logs/**

      - name: Archive for Release
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'default_password' }}
        run: bundle exec fastlane build

      - name: Upload IPA artifact
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: AllesTeurer-${{ github.sha }}.ipa
          path: ./build/validation/*.ipa

  deploy-testflight:
    # Deploy to TestFlight on beta/rc tags or manual dispatch
    if: (startsWith(github.ref, 'refs/tags/v') && (contains(github.ref, '-beta') || contains(github.ref, '-rc'))) || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target == 'testflight')
    needs: build-and-test
    runs-on: macos-26
    outputs:
      ios_ipa: ${{ steps.build.outputs.ios_ipa }}
      macos_app: ${{ steps.build.outputs.macos_app }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Deploy to TestFlight with Fastlane
        id: build
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'default_password' }}
        run: |
          bundle exec fastlane beta
          # Extract file paths for upload
          echo "ios_ipa=$(find ./build/testflight -name '*iOS*.ipa' | head -1)" >> $GITHUB_OUTPUT
          echo "macos_app=$(find ./build/testflight -name '*macOS*.app' | head -1)" >> $GITHUB_OUTPUT

      - name: Upload Multi-platform artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AllesTeurer-Beta-${{ github.ref_name }}
          path: |
            ./build/testflight/*.ipa
            ./build/testflight/*.app

  deploy-appstore:
    # Deploy to App Store on production tags (vX.Y.Z without suffix) or manual dispatch
    if: (startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target == 'appstore')
    needs: build-and-test
    runs-on: macos-26
    outputs:
      ios_ipa: ${{ steps.build.outputs.ios_ipa }}
      macos_app: ${{ steps.build.outputs.macos_app }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Submit to App Store with Fastlane
        id: build
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'default_password' }}
        run: |
          bundle exec fastlane release
          # Extract file paths for upload
          echo "ios_ipa=$(find ./build/appstore -name '*iOS*.ipa' | head -1)" >> $GITHUB_OUTPUT
          echo "macos_app=$(find ./build/appstore -name '*macOS*.app' | head -1)" >> $GITHUB_OUTPUT

      - name: Upload Multi-platform artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AllesTeurer-Release-${{ github.ref_name }}
          path: |
            ./build/appstore/*.ipa
            ./build/appstore/*.app

  build-alpha:
    # Build alpha versions (no store upload, only GitHub Release)
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-alpha')
    needs: build-and-test
    runs-on: macos-26
    outputs:
      ios_ipa: ${{ steps.build.outputs.ios_ipa }}
      macos_app: ${{ steps.build.outputs.macos_app }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Build Alpha with Fastlane
        id: build
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'default_password' }}
        run: |
          bundle exec fastlane alpha
          # Extract file paths for upload
          echo "ios_ipa=$(find ./build/alpha -name '*iOS*.ipa' | head -1)" >> $GITHUB_OUTPUT
          echo "macos_app=$(find ./build/alpha -name '*macOS*.app' | head -1)" >> $GITHUB_OUTPUT

      - name: Upload Multi-platform artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AllesTeurer-Alpha-${{ github.ref_name }}
          path: |
            ./build/alpha/*.ipa
            ./build/alpha/*.app

  create-github-release:
    # Create GitHub Release for all tag-based builds
    needs: [build-and-test, deploy-testflight, deploy-appstore, build-alpha]
    runs-on: ubuntu-latest
    # Always run if build-and-test succeeded and we have a tag, regardless of other jobs
    if: always() && (needs.build-and-test.result == 'success') && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine release type and content
        id: release-info
        run: |
          TAG_NAME="${{ github.ref_name }}"

          if [[ "$TAG_NAME" == *"-alpha"* ]]; then
            echo "type=alpha" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "title=Alpha Release $TAG_NAME" >> $GITHUB_OUTPUT
            echo "body=This is an alpha release for testing purposes. Download the packages below for manual installation." >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" == *"-beta"* ]] || [[ "$TAG_NAME" == *"-rc"* ]]; then
            echo "type=beta" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "title=Beta Release $TAG_NAME" >> $GITHUB_OUTPUT
            echo "body=Beta release available on TestFlight. iOS version: https://testflight.apple.com/join/YOUR_TESTFLIGHT_LINK" >> $GITHUB_OUTPUT
          else
            echo "type=production" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "title=Release $TAG_NAME" >> $GITHUB_OUTPUT
            echo "body=Production release available on the App Store. iOS: https://apps.apple.com/app/alles-teurer/YOUR_APP_ID | macOS: https://apps.apple.com/app/alles-teurer/YOUR_MAC_APP_ID" >> $GITHUB_OUTPUT
          fi

      - name: Download alpha artifacts (if alpha)
        if: contains(github.ref, '-alpha')
        uses: actions/download-artifact@v4
        with:
          name: AllesTeurer-Alpha-${{ github.ref_name }}
          path: ./release-assets/

      - name: Create ZIP archives for alpha releases
        if: contains(github.ref, '-alpha')
        run: |
          cd ./release-assets/

          # Create iOS ZIP
          if [ -f *.ipa ]; then
            mv *.ipa "AllesTeurer-iOS-${{ github.ref_name }}.ipa"
            zip -r "AllesTeurer-iOS-${{ github.ref_name }}.zip" "AllesTeurer-iOS-${{ github.ref_name }}.ipa"
          fi

          # Create macOS ZIP  
          if [ -d *.app ]; then
            mv *.app "AllesTeurer-macOS-${{ github.ref_name }}.app"
            zip -r "AllesTeurer-macOS-${{ github.ref_name }}.zip" "AllesTeurer-macOS-${{ github.ref_name }}.app"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.release-info.outputs.title }}
          body: ${{ steps.release-info.outputs.body }}
          prerelease: ${{ steps.release-info.outputs.prerelease }}
          files: |
            ./release-assets/*.zip
            ./release-assets/*.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
