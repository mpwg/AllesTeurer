name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build_target:
        description: "Target to build"
        required: true
        default: "ios"
        type: choice
        options:
          - ios
          - mac
          - both

# Prevent concurrent runs on the same PR or branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Set permissions for GITHUB_TOKEN following principle of least privilege
permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  build-ios:
    name: Build iOS App
    runs-on: macos-26 # Use macOS 26 as specified in project requirements
    if: ${{ github.event.inputs.build_target == 'ios' || github.event.inputs.build_target == 'both' || github.event.inputs.build_target == '' }}

    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for proper versioning

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4"
          bundler-cache: true # Automatically runs bundle install and caches gems

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "26.0" # Use Xcode 26 as specified in project requirements

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-derived-data-${{ hashFiles('**/*.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-derived-data-

      - name: Install iOS dependencies
        run: |
          # Install any additional iOS dependencies if needed
          echo "Installing iOS dependencies..."

      - name: Import Code Signing Certificates
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
          CI: true
        run: |
          echo "Setting up code signing certificates..."
          bundle exec fastlane sync_certificates

      - name: Build iOS App
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          CI: true

        run: |
          echo "Building iOS app with Fastlane..."
          echo $MATCH_GIT_URL
          bundle exec fastlane build_ios

      - name: Upload iOS Build Artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ios-build-${{ github.run_number }}
          path: |
            *.ipa
            build/
          retention-days: 30

      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ios-build-logs-${{ github.run_number }}
          path: |
            ~/Library/Logs/gym/
            fastlane/builds/
            *.log
          retention-days: 7

  build-mac:
    name: Build macOS App
    runs-on: macos-26 # Use macOS 26 as specified in project requirements
    if: ${{ github.event.inputs.build_target == 'mac' || github.event.inputs.build_target == 'both' }}

    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for proper versioning

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4"
          bundler-cache: true # Automatically runs bundle install and caches gems

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "26.0" # Use Xcode 26 as specified in project requirements

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-derived-data-${{ hashFiles('**/*.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-derived-data-

      - name: Import Code Signing Certificates
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
          MAC_INSTALLER_CERT_NAME: ${{ secrets.MAC_INSTALLER_CERT_NAME }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          CI: true
        run: |
          echo "Setting up code signing certificates for macOS..."
          bundle exec fastlane sync_certificates

      - name: Build macOS App
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
          MAC_INSTALLER_CERT_NAME: ${{ secrets.MAC_INSTALLER_CERT_NAME }}
          CI: true
        run: |
          echo "Building macOS app with Fastlane..."
          bundle exec fastlane build_mac

      - name: Upload macOS Build Artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: macos-build-${{ github.run_number }}
          path: |
            *.app
            *.pkg
            build/
          retention-days: 30

      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: macos-build-logs-${{ github.run_number }}
          path: |
            ~/Library/Logs/gym/
            fastlane/builds/
            *.log
          retention-days: 7

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build-ios, build-mac]
    if: always() && (needs.build-ios.result != 'skipped' || needs.build-mac.result != 'skipped')

    steps:
      - name: Notify Build Status
        run: |
          echo "Build Summary:"
          echo "iOS Build: ${{ needs.build-ios.result || 'skipped' }}"
          echo "macOS Build: ${{ needs.build-mac.result || 'skipped' }}"

          if [[ "${{ needs.build-ios.result }}" == "failure" || "${{ needs.build-mac.result }}" == "failure" ]]; then
            echo "❌ One or more builds failed"
            exit 1
          elif [[ "${{ needs.build-ios.result }}" == "success" || "${{ needs.build-mac.result }}" == "success" ]]; then
            echo "✅ All builds completed successfully"
          fi
