name: AllesTeurer CI/CD Pipeline

on:
  # CI builds on push and PR
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]
  
  # Tag-based releases
  push:
    tags:
      - 'v*.*.*'           # Production releases
      - 'V*.*.*'           # Alternative casing
      - 'v*.*.*-alpha.*'   # Alpha releases  
      - 'v*.*.*-beta.*'    # Beta releases
      - 'v*.*.*-rc.*'      # Release candidates

  # Manual trigger
  workflow_dispatch:
    inputs:
      lane:
        description: 'Fastlane lane to run'
        required: true
        type: choice
        options:
          - ci
          - alpha
          - beta
          - release
        default: ci

env:
  XCODE_VERSION: '26.0'
  IOS_DESTINATION: 'platform=iOS Simulator,name=iPhone 15'
  MACOS_DESTINATION: 'platform=macOS,variant=Mac Catalyst'
  MATCH_KEYCHAIN_NAME: 'fastlane-ci-keychain'
  MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}

jobs:
  # Determine what type of build to run
  determine-build-type:
    runs-on: ubuntu-latest
    outputs:
      build_type: ${{ steps.determine.outputs.build_type }}
      version: ${{ steps.determine.outputs.version }}
    steps:
      - name: Determine build type
        id: determine
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "build_type=${{ github.event.inputs.lane }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v*.*.* ]] || [[ "${{ github.ref }}" == refs/tags/V*.*.* ]]; then
            TAG="${{ github.ref_name }}"
            if [[ "$TAG" =~ -alpha\. ]]; then
              echo "build_type=alpha" >> $GITHUB_OUTPUT
            elif [[ "$TAG" =~ -beta\. ]] || [[ "$TAG" =~ -rc\. ]]; then
              echo "build_type=beta" >> $GITHUB_OUTPUT
            else
              echo "build_type=release" >> $GITHUB_OUTPUT
            fi
            echo "version=$TAG" >> $GITHUB_OUTPUT
          else
            echo "build_type=ci" >> $GITHUB_OUTPUT
          fi

  # Main build job
  build:
    needs: determine-build-type
    runs-on: macos-26
    env:
      BUILD_TYPE: ${{ needs.determine-build-type.outputs.build_type }}
      VERSION_TAG: ${{ needs.determine-build-type.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for tags

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app

      - name: Setup Ruby and install dependencies
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Configure Git for Match
        run: |
          git config --global user.email "ci@github.com"
          git config --global user.name "GitHub CI"

      - name: Configure environment
        run: |
          # Match configuration
          echo "MATCH_GIT_URL=${{ secrets.MATCH_GIT_URL }}" >> $GITHUB_ENV
          echo "MATCH_PASSWORD=${{ secrets.MATCH_PASSWORD }}" >> $GITHUB_ENV
          echo "MATCH_GIT_BASIC_AUTHORIZATION=${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}" >> $GITHUB_ENV
          echo "MATCH_KEYCHAIN_NAME=${{ env.MATCH_KEYCHAIN_NAME }}" >> $GITHUB_ENV
          echo "MATCH_KEYCHAIN_PASSWORD=${{ env.MATCH_KEYCHAIN_PASSWORD }}" >> $GITHUB_ENV
          
          # Apple Developer configuration
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "TEAM_ID=${{ secrets.TEAM_ID }}" >> $GITHUB_ENV
          echo "TEAM_NAME=${{ secrets.TEAM_NAME }}" >> $GITHUB_ENV
          
          # Fastlane configuration
          echo "FASTLANE_USER=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}" >> $GITHUB_ENV
          echo "FASTLANE_SESSION=${{ secrets.FASTLANE_SESSION }}" >> $GITHUB_ENV
          
          # Build configuration
          echo "GITHUB_REF_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV
          
          # App Store Connect API for TestFlight/App Store uploads
          if [[ "${{ env.BUILD_TYPE }}" == "beta" ]] || [[ "${{ env.BUILD_TYPE }}" == "release" ]]; then
            echo "APP_STORE_CONNECT_API_KEY_KEY_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}" >> $GITHUB_ENV
            echo "APP_STORE_CONNECT_API_KEY_ISSUER_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}" >> $GITHUB_ENV
            echo "APP_STORE_CONNECT_API_KEY_CONTENT=${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}" >> $GITHUB_ENV
          fi

      - name: Setup SSH for Match repository
        if: env.BUILD_TYPE != 'ci'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.MATCH_DEPLOY_KEY }}" > ~/.ssh/match_deploy_key
          chmod 600 ~/.ssh/match_deploy_key
          
          # Add SSH configuration
          cat >> ~/.ssh/config <<EOF
          Host github.com
            HostName github.com
            User git
            IdentityFile ~/.ssh/match_deploy_key
            StrictHostKeyChecking no
          EOF

      - name: Run CI build and test
        if: env.BUILD_TYPE == 'ci'
        run: |
          bundle exec fastlane ios ci
          
      - name: Build Alpha release
        if: env.BUILD_TYPE == 'alpha'
        run: |
          bundle exec fastlane ios alpha

      - name: Build and deploy Beta to TestFlight
        if: env.BUILD_TYPE == 'beta'
        run: |
          bundle exec fastlane ios beta

      - name: Build and deploy to App Store
        if: env.BUILD_TYPE == 'release'
        run: |
          bundle exec fastlane ios release

      # Upload artifacts for all non-CI builds
      - name: Upload iOS build
        if: env.BUILD_TYPE != 'ci'
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ env.VERSION_TAG || github.sha }}
          path: fastlane/build/${{ env.BUILD_TYPE }}/*iOS*.ipa
          retention-days: 30

      - name: Upload macOS build
        if: env.BUILD_TYPE != 'ci'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-${{ env.VERSION_TAG || github.sha }}
          path: fastlane/build/${{ env.BUILD_TYPE }}/*macOS*
          retention-days: 30

      # Upload test results for CI builds
      - name: Upload test results
        if: env.BUILD_TYPE == 'ci' && always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.sha }}
          path: |
            fastlane/test_output/
            build/test-results/
          retention-days: 7

  # Create GitHub Release for tag-based builds
  create-release:
    permissions:
      contents: write
    needs: [determine-build-type, build]
    if: needs.determine-build-type.outputs.build_type != 'ci'
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: ${{ needs.determine-build-type.outputs.build_type }}
      VERSION_TAG: ${{ needs.determine-build-type.outputs.version }}
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION_TAG }}
          name: |
            ${{ env.BUILD_TYPE == 'release' && format('Release {0}', env.VERSION_TAG) ||
                env.BUILD_TYPE == 'beta' && format('Beta Release {0}', env.VERSION_TAG) ||
                format('Alpha Release {0}', env.VERSION_TAG) }}
          body: |
            ## AllesTeurer ${{ env.VERSION_TAG }}
            
            ${{ env.BUILD_TYPE == 'release' && '### 🚀 Production Release
            
            **iOS/iPadOS**: Available on [App Store](https://apps.apple.com/app/allesteurer)
            **macOS**: Download below or from future Mac App Store' ||
                env.BUILD_TYPE == 'beta' && '### 🧪 Beta Release
            
            **iOS/iPadOS**: Available on [TestFlight](https://testflight.apple.com/join/YOUR_ID)
            **macOS**: Download below' ||
                '### 🔬 Alpha Release
            
            Internal testing release - not available on stores.
            Download and install manually using Xcode or direct installation.' }}
            
            ### Downloads
            - 📱 iOS: See attached .ipa file
            - 🖥️ macOS: See attached .app bundle
            
            ### Installation
            ${{ env.BUILD_TYPE == 'alpha' && '**iOS**: Install .ipa using Xcode, Apple Configurator, or compatible tools
            **macOS**: Download and open the .app bundle' ||
                env.BUILD_TYPE == 'beta' && '**iOS**: Join TestFlight for automatic updates
            **macOS**: Download and open the .app bundle' ||
                '**iOS**: Update through App Store
            **macOS**: Download and open the .app bundle' }}
          files: |
            artifacts/**/*.ipa
            artifacts/**/*.app
            artifacts/**/*.pkg
          prerelease: ${{ env.BUILD_TYPE != 'release' }}
          draft: false
