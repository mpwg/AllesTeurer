name: AllesTeurer CI/CD Pipeline

on:
  push:
    branches: [main, develop, "feature/**"]
    tags:
      - "v*.*.*" # Production releases
      - "V*.*.*" # Alternative casing
      - "v*.*.*-alpha.*" # Alpha releases
      - "v*.*.*-beta.*" # Beta releases
      - "v*.*.*-rc.*" # Release candidates
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      lane:
        description: "Fastlane lane to run"
        required: true
        type: choice
        options:
          - ci
          - alpha
          - beta
          - release
        default: ci

env:
  XCODE_VERSION: "26.0"
  IOS_DESTINATION: "platform=iOS Simulator,name=iPhone 15"
  MACOS_DESTINATION: "platform=macOS,variant=Mac Catalyst"
  MATCH_KEYCHAIN_NAME: "fastlane-ci-keychain"
  # Removed MATCH_KEYCHAIN_PASSWORD from global env block; now set only in build job env block.

jobs:
  # Determine what type of build to run
  determine-build-type:
    runs-on: ubuntu-latest
    outputs:
      build_type: ${{ steps.determine.outputs.build_type }}
      version: ${{ steps.determine.outputs.version }}
    steps:
      # Removed export step for MATCH_DEPLOY_KEY; will handle in SSH setup step below.
      - name: Determine build type
        id: determine
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "build_type=${{ github.event.inputs.lane }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v*.*.* ]] || [[ "${{ github.ref }}" == refs/tags/V*.*.* ]]; then
            TAG="${{ github.ref_name }}"
            if [[ "$TAG" =~ -alpha\. ]]; then
              echo "build_type=alpha" >> $GITHUB_OUTPUT
            elif [[ "$TAG" =~ -beta\. ]] || [[ "$TAG" =~ -rc\. ]]; then
              echo "build_type=beta" >> $GITHUB_OUTPUT
            else
              echo "build_type=release" >> $GITHUB_OUTPUT
            fi
            echo "version=$TAG" >> $GITHUB_OUTPUT
          else
            echo "build_type=ci" >> $GITHUB_OUTPUT
          fi

  # Main build job
  build:
    needs: determine-build-type
    runs-on: macos-26
    # All secrets are now only in the env block. MATCH_DEPLOY_KEY will be set conditionally in the first step below.
    env:
      BUILD_TYPE: ${{ needs.determine-build-type.outputs.build_type }}
      VERSION_TAG: ${{ needs.determine-build-type.outputs.version }}
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
      APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
      MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    steps:
      - name: Export MATCH_PASSWORD for Fastlane Match
        run: echo "MATCH_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_ENV
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      - name: Export MATCH_DEPLOY_KEY if present
        run: |
          if [ -n "$MATCH_DEPLOY_KEY" ]; then
            echo "MATCH_DEPLOY_KEY=$MATCH_DEPLOY_KEY" >> $GITHUB_ENV
          fi
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for tags

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app

      - name: Setup Ruby and install dependencies
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4"

      - name: Install Ruby gems
        run: bundle install
      - name: Configure App Store Connect API secrets
        if: env.BUILD_TYPE == 'beta' || env.BUILD_TYPE == 'release'
        run: |
          echo "APP_STORE_CONNECT_API_KEY_KEY_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_API_KEY_ISSUER_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_API_KEY_CONTENT=${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}" >> $GITHUB_ENV

      - name: Setup SSH for Match repository
        if: env.BUILD_TYPE != 'ci'
        run: |
          if [ -n "$MATCH_DEPLOY_KEY" ]; then
            mkdir -p ~/.ssh
            echo "$MATCH_DEPLOY_KEY" > ~/.ssh/match_deploy_key
            chmod 600 ~/.ssh/match_deploy_key
            # Add SSH configuration
            cat >> ~/.ssh/config <<EOF
            Host github.com
              HostName github.com
              User git
              IdentityFile ~/.ssh/match_deploy_key
              StrictHostKeyChecking no
            EOF
          else
            echo "MATCH_DEPLOY_KEY not set, skipping SSH setup."
          fi

      - name: Run CI build and test
        if: env.BUILD_TYPE == 'ci'
        run: |
          bundle exec fastlane ios ci

      - name: Build Alpha release
        if: env.BUILD_TYPE == 'alpha'
        run: |
          bundle exec fastlane ios alpha

      - name: Build and deploy Beta to TestFlight
        if: env.BUILD_TYPE == 'beta'
        run: |
          bundle exec fastlane ios beta

      - name: Build and deploy to App Store
        if: env.BUILD_TYPE == 'release'
        run: |
          bundle exec fastlane ios release

      # Upload artifacts for all non-CI builds
      - name: Upload iOS build
        if: env.BUILD_TYPE != 'ci'
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ env.VERSION_TAG || github.sha }}
          path: fastlane/build/${{ env.BUILD_TYPE }}/*iOS*.ipa
          retention-days: 30

      - name: Upload macOS build
        if: env.BUILD_TYPE != 'ci'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-${{ env.VERSION_TAG || github.sha }}
          path: fastlane/build/${{ env.BUILD_TYPE }}/*macOS*
          retention-days: 30

      # Upload test results for CI builds
      - name: Upload test results
        if: env.BUILD_TYPE == 'ci' && always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.sha }}
          path: |
            fastlane/test_output/
            build/test-results/
          retention-days: 7

  # Create GitHub Release for tag-based builds
  create-release:
    permissions:
      contents: write
    needs: [determine-build-type, build]
    if: needs.determine-build-type.outputs.build_type != 'ci'
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: ${{ needs.determine-build-type.outputs.build_type }}
      VERSION_TAG: ${{ needs.determine-build-type.outputs.version }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION_TAG }}
          name: |
            ${{ env.BUILD_TYPE == 'release' && format('Release {0}', env.VERSION_TAG) ||
                env.BUILD_TYPE == 'beta' && format('Beta Release {0}', env.VERSION_TAG) ||
                format('Alpha Release {0}', env.VERSION_TAG) }}
          body: |
            ## AllesTeurer ${{ env.VERSION_TAG }}

            ${{ env.BUILD_TYPE == 'release' && '### 🚀 Production Release

            **iOS/iPadOS**: Available on [App Store](https://apps.apple.com/app/allesteurer)
            **macOS**: Download below or from future Mac App Store' ||
                env.BUILD_TYPE == 'beta' && '### 🧪 Beta Release

            **iOS/iPadOS**: Available on [TestFlight](https://testflight.apple.com/join/YOUR_ID)
            **macOS**: Download below' ||
                '### 🔬 Alpha Release

            Internal testing release - not available on stores.
            Download and install manually using Xcode or direct installation.' }}

            ### Downloads
            - 📱 iOS: See attached .ipa file
            - 🖥️ macOS: See attached .app bundle

            ### Installation
            ${{ env.BUILD_TYPE == 'alpha' && '**iOS**: Install .ipa using Xcode, Apple Configurator, or compatible tools
            **macOS**: Download and open the .app bundle' ||
                env.BUILD_TYPE == 'beta' && '**iOS**: Join TestFlight for automatic updates
            **macOS**: Download and open the .app bundle' ||
                '**iOS**: Update through App Store
            **macOS**: Download and open the .app bundle' }}
          files: |
            artifacts/**/*.ipa
            artifacts/**/*.app
            artifacts/**/*.pkg
          prerelease: ${{ env.BUILD_TYPE != 'release' }}
          draft: false
