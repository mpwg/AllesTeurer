name: Build and Test

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".github/**"
      - "!.github/workflows/**"
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
  workflow_dispatch:
    inputs:
      deploy_target:
        description: "Deploy to environment"
        required: false
        default: "none"
        type: choice
        options:
          - none
          - staging
          - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=true -Dorg.gradle.caching=true
  JAVA_VERSION: "21"
  XCODE_VERSION: "26.0"
  RUBY_VERSION: "3.4"

jobs:
  # Single job that handles validation, test, and Android build
  build-and-test:
    name: Build & Test (Android)
    runs-on: ubuntu-latest
    outputs:
      build-success: ${{ steps.build.outcome == 'success' }}
      apk-path: ${{ steps.build.outputs.apk-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2
        timeout-minutes: 5

      - name: Run Detekt & Tests
        run: |
          ./gradlew detekt test --continue
        timeout-minutes: 15

      - name: Build Android Debug APK
        id: build
        run: |
          ./gradlew :composeApp:assembleDebug
          echo "apk-path=composeApp/build/outputs/apk/debug/composeApp-debug.apk" >> $GITHUB_OUTPUT
        timeout-minutes: 20

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            build/reports/
            */build/reports/
            */build/test-results/
          retention-days: 3

      - name: Upload APK
        if: steps.build.conclusion == 'success' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: ${{ steps.build.outputs.apk-path }}
          retention-days: 7

      - name: Comment PR with APK link
        if: github.event_name == 'pull_request' && steps.build.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… Build successful! APK artifact available in workflow run.'
            })

  # iOS build only on main/develop or manual trigger
  build-ios:
    name: Build iOS
    runs-on: macos-26 # Configurable runner
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target != 'none')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      - name: Build KMP shared modules
        run: ./gradlew :shared:build -x test
        timeout-minutes: 15

      - name: Build iOS Simulator
        run: |
          cd composeApp
          xcodebuild -scheme composeApp \
            -configuration Debug \
            -sdk iphonesimulator \
            -derivedDataPath build/ios \
            build
        timeout-minutes: 25

      - name: Upload iOS build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs
          path: composeApp/build/ios/Logs/
          retention-days: 3

  # Simplified deployment - only via manual trigger
  deploy:
    name: Deploy to ${{ github.event.inputs.deploy_target }}
    runs-on: ubuntu-latest
    needs: [build-and-test, build-ios]
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.deploy_target != 'none' &&
      needs.build-and-test.outputs.build-success
    environment:
      name: ${{ github.event.inputs.deploy_target }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        if: github.event.inputs.deploy_target == 'production'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-debug-apk

      - name: Deploy to Staging (Firebase App Distribution)
        if: github.event.inputs.deploy_target == 'staging'
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: testers
          file: android-debug-apk/composeApp-debug.apk
          releaseNotes: |
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}

      - name: Deploy to Production
        if: github.event.inputs.deploy_target == 'production'
        run: |
          echo "ðŸš€ Production deployment triggered for commit ${{ github.sha }}"
          echo "Manual steps required:"
          echo "1. Download the APK artifact"
          echo "2. Sign with release keys locally"
          echo "3. Upload to Google Play Console"
          echo "4. Create iOS release build on local Mac"
          echo "5. Submit to App Store Connect"

  # Status summary
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, build-ios]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## ðŸ“Š Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Android | ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| iOS | ${{ needs.build-ios.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "### Deployment" >> $GITHUB_STEP_SUMMARY
            echo "Target: **${{ github.event.inputs.deploy_target }}**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### Resources Used" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow triggered by: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
