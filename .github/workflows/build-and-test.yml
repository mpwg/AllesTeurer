name: Build and Test

on:
  push:
    branches: [main, develop, feature/*, fix/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type to run"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - ios-only
          - android-only
          - validation-only

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=true -Dorg.gradle.caching=true
  JAVA_VERSION: "17"

jobs:
  # Static analysis and validation
  validate:
    name: Validate & Lint
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.should-build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      - name: Check for changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/develop") ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            # For PRs and feature branches, check if there are relevant changes
            if git diff --name-only origin/${{ github.base_ref || 'main' }}...HEAD | grep -E '\.(kt|kts|swift|gradle|properties|yml|yaml)$|Fastfile|Gemfile'; then
              echo "should-build=true" >> $GITHUB_OUTPUT
            else
              echo "should-build=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v3

      - name: Run Detekt
        run: ./gradlew detekt

      - name: Upload Detekt reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: detekt-reports
          path: |
            build/reports/detekt/
            */build/reports/detekt/
          retention-days: 7

      - name: Run tests
        run: ./gradlew test

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            */build/reports/tests/
            */build/test-results/
          retention-days: 7

  # Build iOS app using Fastlane
  build-ios:
    name: Build iOS
    runs-on: macos-14
    needs: validate
    if: |
      needs.validate.outputs.should-build == 'true' &&
      (github.event.inputs.build_type == '' || 
       github.event.inputs.build_type == 'all' || 
       github.event.inputs.build_type == 'ios-only')
    env:
      FASTLANE_SKIP_UPDATE_CHECK: ${{ secrets.FASTLANE_SKIP_UPDATE_CHECK }}
      FASTLANE_HIDE_CHANGELOG: ${{ secrets.FASTLANE_HIDE_CHANGELOG }}
      FASTLANE_DISABLE_COLORS: ${{ secrets.FASTLANE_DISABLE_COLORS }}
      FASTLANE_OPT_OUT_USAGE: ${{ secrets.FASTLANE_OPT_OUT_USAGE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.1"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install dependencies
        run: |
          cd fastlane
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Build KMP shared modules
        run: ./gradlew :shared:build -x test

      - name: Build iOS (Simulator)
        run: |
          cd fastlane
          bundle exec fastlane ios build
        env:
          # iOS build environment variables
          APPLE_ID: ${{ secrets.APPLE_ID }}
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
          APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Upload iOS build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts
          path: |
            build/ios/
            fastlane/build/ios/
          retention-days: 7

  # Build Android app using Fastlane
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: validate
    if: |
      needs.validate.outputs.should-build == 'true' &&
      (github.event.inputs.build_type == '' || 
       github.event.inputs.build_type == 'all' || 
       github.event.inputs.build_type == 'android-only')
    env:
      FASTLANE_SKIP_UPDATE_CHECK: ${{ secrets.FASTLANE_SKIP_UPDATE_CHECK }}
      FASTLANE_HIDE_CHANGELOG: ${{ secrets.FASTLANE_HIDE_CHANGELOG }}
      FASTLANE_DISABLE_COLORS: ${{ secrets.FASTLANE_DISABLE_COLORS }}
      FASTLANE_OPT_OUT_USAGE: ${{ secrets.FASTLANE_OPT_OUT_USAGE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install dependencies
        run: |
          cd fastlane
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Build KMP shared modules
        run: ./gradlew :shared:build -x test

      - name: Build Android Debug APK
        run: |
          cd fastlane
          bundle exec fastlane android build
        env:
          # Android build environment variables
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          GOOGLE_PLAY_JSON_KEY_PATH: ${{ secrets.GOOGLE_PLAY_JSON_KEY_PATH }}

      - name: Upload Android build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-build-artifacts
          path: |
            composeApp/build/outputs/
            build/android/
            fastlane/build/android/
          retention-days: 7

  # Build validation job (lightweight, no signing)
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: validate
    if: |
      needs.validate.outputs.should-build == 'true' &&
      (github.event.inputs.build_type == 'validation-only' || 
       (github.event_name == 'pull_request' && 
        github.event.inputs.build_type != 'all' && 
        github.event.inputs.build_type != 'ios-only' && 
        github.event.inputs.build_type != 'android-only'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: true

      - name: Build shared modules
        run: ./gradlew :shared:build

      - name: Build compose app (no signing)
        run: ./gradlew :composeApp:assembleDebug -x signDebugApk

  # Deployment jobs (triggered on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-ios, build-android]
    if: |
      github.ref == 'refs/heads/develop' && 
      (success() || (needs.build-ios.result == 'skipped' && needs.build-android.result != 'failure') || 
       (needs.build-android.result == 'skipped' && needs.build-ios.result != 'failure'))
    env:
      FASTLANE_SKIP_UPDATE_CHECK: ${{ secrets.FASTLANE_SKIP_UPDATE_CHECK }}
      FASTLANE_HIDE_CHANGELOG: ${{ secrets.FASTLANE_HIDE_CHANGELOG }}
      FASTLANE_DISABLE_COLORS: ${{ secrets.FASTLANE_DISABLE_COLORS }}
      FASTLANE_OPT_OUT_USAGE: ${{ secrets.FASTLANE_OPT_OUT_USAGE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Download iOS artifacts
        if: needs.build-ios.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: ios-build-artifacts
          path: ios-artifacts/

      - name: Download Android artifacts
        if: needs.build-android.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: android-build-artifacts
          path: android-artifacts/

      - name: Deploy to TestFlight (iOS)
        if: needs.build-ios.result == 'success'
        run: |
          cd fastlane
          bundle exec fastlane ios beta
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
          APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Deploy to Internal App Sharing (Android)
        if: needs.build-android.result == 'success'
        run: |
          cd fastlane
          bundle exec fastlane android beta
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          GOOGLE_PLAY_JSON_KEY_PATH: ${{ secrets.GOOGLE_PLAY_JSON_KEY_PATH }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-ios, build-android]
    if: |
      github.ref == 'refs/heads/main' && 
      (success() || (needs.build-ios.result == 'skipped' && needs.build-android.result != 'failure') || 
       (needs.build-android.result == 'skipped' && needs.build-ios.result != 'failure'))
    env:
      FASTLANE_SKIP_UPDATE_CHECK: ${{ secrets.FASTLANE_SKIP_UPDATE_CHECK }}
      FASTLANE_HIDE_CHANGELOG: ${{ secrets.FASTLANE_HIDE_CHANGELOG }}
      FASTLANE_DISABLE_COLORS: ${{ secrets.FASTLANE_DISABLE_COLORS }}
      FASTLANE_OPT_OUT_USAGE: ${{ secrets.FASTLANE_OPT_OUT_USAGE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Download iOS artifacts
        if: needs.build-ios.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: ios-build-artifacts
          path: ios-artifacts/

      - name: Download Android artifacts
        if: needs.build-android.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: android-build-artifacts
          path: android-artifacts/

      - name: Release to App Store (iOS)
        if: needs.build-ios.result == 'success'
        run: |
          cd fastlane
          bundle exec fastlane ios release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
          APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Release to Google Play (Android)
        if: needs.build-android.result == 'success'
        run: |
          cd fastlane
          bundle exec fastlane android release
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          GOOGLE_PLAY_JSON_KEY_PATH: ${{ secrets.GOOGLE_PLAY_JSON_KEY_PATH }}

  # Cleanup job
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs:
      [
        validate,
        build-ios,
        build-android,
        build-validation,
        deploy-staging,
        deploy-production,
      ]
    if: always()
    steps:
      - name: Report workflow results
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validate | ${{ needs.validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build iOS | ${{ needs.build-ios.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Android | ${{ needs.build-android.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Validation | ${{ needs.build-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy Staging | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy Production | ${{ needs.deploy-production.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.validate.result }}" == "failure" ]]; then
            echo "❌ Validation failed - check Detekt and test reports"
          fi

          if [[ "${{ needs.build-ios.result }}" == "success" ]]; then
            echo "✅ iOS build completed successfully"
          fi

          if [[ "${{ needs.build-android.result }}" == "success" ]]; then
            echo "✅ Android build completed successfully" 
          fi
